name: S4 Class Validation

on:
  workflow_dispatch:
  push:
    branches: [main, develop]
    paths:
      - "R/**"
      - "NAMESPACE"
      - "DESCRIPTION"
      - ".github/workflows/s4-class-check.yaml"
  pull_request:
    branches: [main, develop]
    paths:
      - "R/**"
      - "NAMESPACE"
      - "DESCRIPTION"
      - ".github/workflows/s4-class-check.yaml"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  s4-class-check:
    name: Validate S4 Classes
    runs-on: ubuntu-22.04
    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      R_KEEP_PKG_SOURCE: yes

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up R
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: 'release'
          use-public-rspm: true

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libcurl4-openssl-dev libxml2-dev libfontconfig1-dev libharfbuzz-dev

      - name: Install R dependencies
        uses: r-lib/actions/setup-r-dependencies@v2
        with:
          extra-packages: |
            any::remotes
          needs: check

      - name: Copy S4 class check script
        run: |
          mkdir -p R/utils
          cp development/check_s4_classes.R R/utils/
          echo "Copied check_s4_classes.R to R/utils/"

      - name: Install package
        run: |
          R CMD build .
          PKG_FILE=$(ls -1t *.tar.gz | head -n 1)
          R CMD INSTALL --no-multiarch --with-keep.source ${PKG_FILE}
          echo "Installed package ${PKG_FILE}"

      - name: Check S4 Class Registration
        run: |
          Rscript -e '
          library(methods)
          library(microFGT)
          
          # List of expected S4 classes
          expected_classes <- c("FGTExperiment")
          
          # Check each class
          for (class_name in expected_classes) {
            if (!isClass(class_name)) {
              cat("ERROR: Class", class_name, "is not properly registered\n")
              quit(status = 1)
            } else {
              cat("Class", class_name, "registered correctly\n")
            }
          }
          
          # Check if they are S4 classes
          for (class_name in expected_classes) {
            if (!isClass(class_name) || !is(getClass(class_name), "classRepresentation")) {
              cat("ERROR: Class", class_name, "is not an S4 class\n")
              quit(status = 1)
            } else {
              cat("Class", class_name, "is a proper S4 class\n")
            }
          }
          '

      - name: Check S4 Method Resolution
        run: |
          Rscript -e '
          library(methods)
          library(microFGT)
          
          # List of expected methods
          expected_methods <- list(
            list(generic = "experimentType", signature = "FGTExperiment"),
            list(generic = "experimentType<-", signature = "FGTExperiment"),
            list(generic = "fgtMetadata", signature = "FGTExperiment"),
            list(generic = "fgtMetadata<-", signature = "FGTExperiment")
          )
          
          # Check each method
          for (method in expected_methods) {
            if (is.null(selectMethod(method$generic, method$signature, optional = TRUE))) {
              cat("ERROR: Method", method$generic, "for", method$signature, "not found\n")
              quit(status = 1)
            } else {
              cat("Method", method$generic, "for", method$signature, "found\n")
            }
          }
          '

      - name: Test S4 Object Creation
        run: |
          Rscript -e '
          library(methods)
          library(microFGT)
          
          # Create test object
          counts <- matrix(1:12, nrow=3, ncol=4)
          rownames(counts) <- paste0("Gene", 1:3)
          colnames(counts) <- paste0("Sample", 1:4)
          
          # Test constructor
          tryCatch({
            fgt <- FGTExperiment(assays=list(counts=counts))
            cat("Successfully created FGTExperiment object\n")
          }, error = function(e) {
            cat("ERROR creating FGTExperiment object:", conditionMessage(e), "\n")
            quit(status = 1)
          })
          
          # Test accessors and setters
          tryCatch({
            # Test accessor
            cat("Default experimentType:", experimentType(fgt), "\n")
            
            # Test setter
            experimentType(fgt) <- "metagenomic"
            new_type <- experimentType(fgt)
            
            if (new_type != "metagenomic") {
              cat("ERROR: experimentType<- did not work correctly\n")
              quit(status = 1)
            } else {
              cat("experimentType<- works correctly\n")
            }
            
            # Test metadata
            fgtMetadata(fgt) <- S4Vectors::SimpleList(test="value")
            if (!"test" %in% names(fgtMetadata(fgt))) {
              cat("ERROR: fgtMetadata<- did not work correctly\n")
              quit(status = 1)
            } else {
              cat("fgtMetadata<- works correctly\n")
            }
          }, error = function(e) {
            cat("ERROR testing methods:", conditionMessage(e), "\n")
            quit(status = 1)
          })
          '

      - name: Validate NAMESPACE Exports
        run: |
          Rscript -e '
          # Read the NAMESPACE file
          ns_file <- system.file("NAMESPACE", package="microFGT")
          ns_content <- readLines(ns_file)
          
          # Check for S4 class exports
          if (!any(grepl("^exportClasses\\(FGTExperiment\\)", ns_content))) {
            cat("ERROR: Missing exportClasses(FGTExperiment) in NAMESPACE\n")
            quit(status = 1)
          } else {
            cat("exportClasses(FGTExperiment) found in NAMESPACE\n")
          }
          
          # Check for method exports
          required_exports <- c(
            "^export\\(experimentType\\)",
            "^export\\(`experimentType<-`\\)",
            "^export\\(fgtMetadata\\)",
            "^export\\(`fgtMetadata<-`\\)"
          )
          
          missing <- character(0)
          for (pattern in required_exports) {
            if (!any(grepl(pattern, ns_content))) {
              missing <- c(missing, pattern)
            }
          }
          
          if (length(missing) > 0) {
            cat("ERROR: Missing required exports in NAMESPACE:\n")
            cat(missing, sep="\n")
            quit(status = 1)
          } else {
            cat("All required method exports found in NAMESPACE\n")
          }
          '